// File: sdram_test.v
// Generated by MyHDL 0.10
// Date: Tue Aug 14 22:40:11 2018


`timescale 1ns/10ps

module sdram_test (
    master_clk_i,
    sdram_clk_o,
    sdram_clk_i,
    led_status,
    i_uart_rx,
    o_uart_tx,
    pb_i,
    sdramCntl_inst_sd_intf_cke,
    sdramCntl_inst_sd_intf_we,
    sdramCntl_inst_sd_intf_addr,
    sdramCntl_inst_sd_intf_dqml,
    sdramCntl_inst_sd_intf_cas,
    sdramCntl_inst_sd_intf_dqmh,
    sdramCntl_inst_sd_intf_ras,
    sdramCntl_inst_sd_intf_bs,
    sdramCntl_inst_sd_intf_cs,
    sdramCntl_inst_sd_intf_dq
);


input master_clk_i;
output sdram_clk_o;
wire sdram_clk_o;
input sdram_clk_i;
output [3:0] led_status;
reg [3:0] led_status;
input i_uart_rx;
output o_uart_tx;
reg o_uart_tx;
input pb_i;
output sdramCntl_inst_sd_intf_cke;
reg sdramCntl_inst_sd_intf_cke;
output sdramCntl_inst_sd_intf_we;
reg sdramCntl_inst_sd_intf_we;
output [12:0] sdramCntl_inst_sd_intf_addr;
reg [12:0] sdramCntl_inst_sd_intf_addr;
output sdramCntl_inst_sd_intf_dqml;
reg sdramCntl_inst_sd_intf_dqml;
output sdramCntl_inst_sd_intf_cas;
reg sdramCntl_inst_sd_intf_cas;
output sdramCntl_inst_sd_intf_dqmh;
reg sdramCntl_inst_sd_intf_dqmh;
output sdramCntl_inst_sd_intf_ras;
reg sdramCntl_inst_sd_intf_ras;
output [1:0] sdramCntl_inst_sd_intf_bs;
reg [1:0] sdramCntl_inst_sd_intf_bs;
output sdramCntl_inst_sd_intf_cs;
reg sdramCntl_inst_sd_intf_cs;
inout [15:0] sdramCntl_inst_sd_intf_dq;
wire [15:0] sdramCntl_inst_sd_intf_dq;

reg pb_prev;
reg pb_debounced;
reg initialized;
reg [5:0] debounce_cntr;
wire clk;
reg o_TX_Done;
reg clk50MHz;
reg w_TX_Active;
wire reset;
reg w_TX_Serial;
reg [2:0] state_rx=0;
reg w_RX_DV;
reg [7:0] w_RX_Byte;
reg [7:0] test_status;
reg [2:0] state_tx=0;
reg [2:0] uart_tx_inst_r_Bit_Index=0;
reg [11:0] uart_tx_inst_r_Clock_Count=0;
reg uart_tx_inst_r_TX_Done;
reg uart_tx_inst_r_TX_Active;
reg [7:0] uart_tx_inst_r_TX_data;
reg [2:0] uart_rx_inst_r_Bit_Index=0;
reg uart_rx_inst_r_RX_DV;
reg [7:0] uart_rx_inst_r_RX_Byte=0;
reg [11:0] uart_rx_inst_r_Clock_Count=0;
reg [2:0] sdramCntl_inst_cmd_r;
reg [12:0] sdramCntl_inst_sAddr_x;
reg [2:0] sdramCntl_inst_cmd_x;
wire [12:0] sdramCntl_inst_row_s;
reg [12:0] sdramCntl_inst_sAddr_r;
reg [15:0] sdramCntl_inst_sdramData_x;
reg sdramCntl_inst_activateInProgress_s;
wire sdramCntl_inst_host_intf_done_o;
reg sdramCntl_inst_sDataDir_x;
reg sdramCntl_inst_sDataDir_r;
wire [1:0] sdramCntl_inst_ba_x;
reg [4:0] sdramCntl_inst_rdPipeline_r;
reg [13:0] sdramCntl_inst_rfshCntr_x;
reg [1:0] sdramCntl_inst_ba_r;
reg [4:0] sdramCntl_inst_rdPipeline_x;
wire [15:0] sdramCntl_inst_host_intf_data_o;
reg [13:0] sdramCntl_inst_rfshCntr_r;
reg [15:0] sdramCntl_inst_sDriver;
reg [1:0] sdramCntl_inst_activeBank_x;
wire sdramCntl_inst_host_intf_wr_i;
reg sdramCntl_inst_doActivate_s;
wire [15:0] sdramCntl_inst_host_intf_data_i;
wire [1:0] sdramCntl_inst_bank_s;
reg [9:0] sdramCntl_inst_refTimer_r;
reg sdramCntl_inst_rdInProgress_s;
reg [9:0] sdramCntl_inst_refTimer_x;
reg sdramCntl_inst_writeInProgress_s;
reg [2:0] sdramCntl_inst_state_x;
reg [15:0] sdramCntl_inst_sData_r;
wire [8:0] sdramCntl_inst_col_s;
reg [2:0] sdramCntl_inst_state_r;
wire [15:0] sdramCntl_inst_sData_x;
reg [10:0] sdramCntl_inst_timer_x;
reg [4:0] sdramCntl_inst_wrPipeline_x;
reg [1:0] sdramCntl_inst_activeBank_r;
reg [1:0] sdramCntl_inst_wrTimer_x;
wire sdramCntl_inst_host_intf_rdPending_o;
wire [23:0] sdramCntl_inst_host_intf_addr_i;
reg [4:0] sdramCntl_inst_wrPipeline_r;
reg [15:0] sdramCntl_inst_sdramData_r;
reg [1:0] sdramCntl_inst_wrTimer_r;
reg [10:0] sdramCntl_inst_timer_r;
wire sdramCntl_inst_host_intf_rd_i;
reg [2:0] sdramCntl_inst_rasTimer_x;
reg [2:0] sdramCntl_inst_rasTimer_r;
reg memory_test_inst_rand_load;
reg memory_test_inst_rand_enable;
wire [15:0] memory_test_inst_rand_val;
reg memory_test_inst_rd_enable;
reg [1:0] memory_test_inst_test_state;
reg [26:0] memory_test_inst_address;
wire memory_test_inst_host_intf_rst_i;
reg memory_test_inst_wr_enable;
reg memory_test_inst_error;
reg [15:0] memory_test_inst_rand_gen_shfreg;
reg [12:0] sdramCntl_inst_activeRow_x [0:4-1];
reg [12:0] sdramCntl_inst_activeRow_r [0:4-1];
reg sdramCntl_inst_activeFlag_x [0:4-1];
reg sdramCntl_inst_activeFlag_r [0:4-1];

assign sdramCntl_inst_sd_intf_dq = sdramCntl_inst_sDriver;



assign reset = ((!initialized) || (!pb_debounced));



assign sdram_clk_o = clk50MHz;
assign clk = sdram_clk_i;


always @(posedge master_clk_i) begin: SDRAM_TEST_DIV2
    clk50MHz <= (!clk50MHz);
end


always @(posedge clk) begin: SDRAM_TEST_DEBOUNCE_PB
    if ((pb_i != pb_prev)) begin
        debounce_cntr <= (49 - 1);
    end
    else begin
        if ((debounce_cntr == 0)) begin
            pb_debounced <= pb_i;
            debounce_cntr <= 1;
        end
        else begin
            debounce_cntr <= (debounce_cntr - 1);
        end
    end
    pb_prev <= pb_i;
end


always @(posedge clk) begin: SDRAM_TEST_INTERNAL_RESET
    if ((initialized == 1'b0)) begin
        initialized <= (!initialized);
    end
end


always @(posedge sdram_clk_o) begin: SDRAM_TEST_UART_TX_INST_SEND
    case (state_tx)
        3'b000: begin
            // Drive Line High for TX_IDLE
            w_TX_Serial <= 1;
            uart_tx_inst_r_TX_Done <= 0;
            uart_tx_inst_r_Bit_Index <= 0;
            uart_tx_inst_r_Clock_Count <= 0;
            if ((w_RX_DV == 1)) begin
                uart_tx_inst_r_TX_Active <= 1;
                uart_tx_inst_r_TX_data <= w_RX_Byte;
                state_tx <= 3'b001;
            end
            else begin
                state_tx <= 3'b000;
                // End of TX TX_IDLE state
                // Start of TX TX_START_BIT state
            end
        end
        3'b001: begin
            w_TX_Serial <= 0;
            if (($signed({1'b0, uart_tx_inst_r_Clock_Count}) < (434 - 1))) begin
                uart_tx_inst_r_Clock_Count <= (uart_tx_inst_r_Clock_Count + 1);
                state_tx <= 3'b001;
            end
            else begin
                uart_tx_inst_r_Clock_Count <= 0;
                state_tx <= 3'b010;
                // End of TX TX_START_BIT state_tx
                // Start of TX TX_DATA_BITS state_tx
            end
        end
        3'b010: begin
            w_TX_Serial <= uart_tx_inst_r_TX_data[uart_tx_inst_r_Bit_Index];
            if (($signed({1'b0, uart_tx_inst_r_Clock_Count}) < (434 - 1))) begin
                uart_tx_inst_r_Clock_Count <= (uart_tx_inst_r_Clock_Count + 1);
                state_tx <= 3'b010;
            end
            else begin
                uart_tx_inst_r_Clock_Count <= 0;
                if ((uart_tx_inst_r_Bit_Index < 7)) begin
                    uart_tx_inst_r_Bit_Index <= (uart_tx_inst_r_Bit_Index + 1);
                    state_tx <= 3'b010;
                end
                else begin
                    uart_tx_inst_r_Bit_Index <= 0;
                    state_tx <= 3'b011;
                end
                // End of TX TX_DATA_BITS state_tx
                // Start of TX TX_STOP_BIT state_tx
            end
        end
        3'b011: begin
            w_TX_Serial <= 1;
            if (($signed({1'b0, uart_tx_inst_r_Clock_Count}) < (434 - 1))) begin
                uart_tx_inst_r_Clock_Count <= (uart_tx_inst_r_Clock_Count + 1);
                state_tx <= 3'b011;
            end
            else begin
                uart_tx_inst_r_TX_Done <= 1;
                uart_tx_inst_r_Clock_Count <= 0;
                state_tx <= 3'b100;
                uart_tx_inst_r_TX_Active <= 0;
                // End of TX TX_STOP_BIT state_tx
                // Start of TX TX_CLEANUP state_tx
            end
        end
        3'b100: begin
            uart_tx_inst_r_TX_Done <= 1;
            state_tx <= 3'b000;
        end
        default: begin
            state_tx <= 3'b000;
        end
    endcase
    w_TX_Active <= uart_tx_inst_r_TX_Active;
    o_TX_Done <= uart_tx_inst_r_TX_Done;
end


always @(sdramCntl_inst_activeRow_r[0], sdramCntl_inst_activeRow_r[1], sdramCntl_inst_activeRow_r[2], sdramCntl_inst_activeRow_r[3], sdramCntl_inst_row_s, sdramCntl_inst_sAddr_r, sdramCntl_inst_activateInProgress_s, sdramCntl_inst_activeBank_r, sdramCntl_inst_sDataDir_r, sdramCntl_inst_ba_x, sdramCntl_inst_rdPipeline_r, sdramCntl_inst_ba_r, sdramCntl_inst_rfshCntr_r, sdramCntl_inst_host_intf_wr_i, sdramCntl_inst_doActivate_s, sdramCntl_inst_bank_s, sdramCntl_inst_refTimer_r, sdramCntl_inst_rdInProgress_s, sdramCntl_inst_writeInProgress_s, sdramCntl_inst_col_s, sdramCntl_inst_state_r, sdramCntl_inst_wrTimer_r, sdramCntl_inst_timer_r, sdramCntl_inst_host_intf_rd_i, sdramCntl_inst_rasTimer_r, sdramCntl_inst_activeFlag_r[0], sdramCntl_inst_activeFlag_r[1], sdramCntl_inst_activeFlag_r[2], sdramCntl_inst_activeFlag_r[3]) begin: SDRAM_TEST_SDRAMCNTL_INST_COMB_FUNC
    integer index;
    sdramCntl_inst_rdPipeline_x = {1'b0, sdramCntl_inst_rdPipeline_r[(3 + 2)-1:1]};
    sdramCntl_inst_wrPipeline_x = 5'h0;
    if ((sdramCntl_inst_rasTimer_r != 0)) begin
        sdramCntl_inst_rasTimer_x = (sdramCntl_inst_rasTimer_r - 1);
    end
    else begin
        sdramCntl_inst_rasTimer_x = sdramCntl_inst_rasTimer_r;
    end
    if ((sdramCntl_inst_wrTimer_r != 0)) begin
        sdramCntl_inst_wrTimer_x = (sdramCntl_inst_wrTimer_r - 1);
    end
    else begin
        sdramCntl_inst_wrTimer_x = sdramCntl_inst_wrTimer_r;
    end
    if ((sdramCntl_inst_refTimer_r != 0)) begin
        sdramCntl_inst_refTimer_x = (sdramCntl_inst_refTimer_r - 1);
        sdramCntl_inst_rfshCntr_x = sdramCntl_inst_rfshCntr_r;
    end
    else begin
        sdramCntl_inst_refTimer_x = 782;
        sdramCntl_inst_rfshCntr_x = (sdramCntl_inst_rfshCntr_r + 1);
    end
    sdramCntl_inst_cmd_x = 7;
    sdramCntl_inst_state_x = sdramCntl_inst_state_r;
    sdramCntl_inst_sAddr_x = sdramCntl_inst_sAddr_r;
    sdramCntl_inst_activeBank_x = sdramCntl_inst_activeBank_r;
    sdramCntl_inst_sDataDir_x = sdramCntl_inst_sDataDir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        sdramCntl_inst_activeFlag_x[index] = sdramCntl_inst_activeFlag_r[index];
        sdramCntl_inst_activeRow_x[index] = sdramCntl_inst_activeRow_r[index];
    end
    if ((sdramCntl_inst_timer_r != 0)) begin
        sdramCntl_inst_timer_x = (sdramCntl_inst_timer_r - 1);
        sdramCntl_inst_cmd_x = 7;
    end
    else begin
        sdramCntl_inst_timer_x = sdramCntl_inst_timer_r;
        case (sdramCntl_inst_state_r)
            3'b000: begin
                sdramCntl_inst_timer_x = 2000;
                sdramCntl_inst_state_x = 3'b001;
            end
            3'b001: begin
                sdramCntl_inst_cmd_x = 2;
                sdramCntl_inst_timer_x = 2;
                sdramCntl_inst_state_x = 3'b011;
                sdramCntl_inst_sAddr_x = 512;
                sdramCntl_inst_rfshCntr_x = 8;
            end
            3'b011: begin
                sdramCntl_inst_cmd_x = 1;
                sdramCntl_inst_timer_x = 7;
                sdramCntl_inst_rfshCntr_x = (sdramCntl_inst_rfshCntr_r - 1);
                if ((sdramCntl_inst_rfshCntr_r == 1)) begin
                    sdramCntl_inst_state_x = 3'b010;
                end
            end
            3'b010: begin
                sdramCntl_inst_cmd_x = 0;
                sdramCntl_inst_timer_x = 2;
                sdramCntl_inst_state_x = 3'b100;
                sdramCntl_inst_sAddr_x = 48;
            end
            3'b100: begin
                if ((sdramCntl_inst_rfshCntr_r != 0)) begin
                    if (((sdramCntl_inst_activateInProgress_s == 1'b0) && (sdramCntl_inst_writeInProgress_s == 1'b0) && (sdramCntl_inst_rdInProgress_s == 1'b0))) begin
                        sdramCntl_inst_cmd_x = 2;
                        sdramCntl_inst_timer_x = 2;
                        sdramCntl_inst_state_x = 3'b110;
                        sdramCntl_inst_sAddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            sdramCntl_inst_activeFlag_x[index] = 1'b0;
                        end
                    end
                end
                else if ((sdramCntl_inst_host_intf_rd_i == 1'b1)) begin
                    if ((sdramCntl_inst_ba_x == sdramCntl_inst_ba_r)) begin
                        if ((sdramCntl_inst_doActivate_s == 1'b1)) begin
                            if (((sdramCntl_inst_activateInProgress_s == 1'b0) && (sdramCntl_inst_writeInProgress_s == 1'b0) && (sdramCntl_inst_rdInProgress_s == 1'b0))) begin
                                sdramCntl_inst_cmd_x = 2;
                                sdramCntl_inst_timer_x = 2;
                                sdramCntl_inst_state_x = 3'b101;
                                sdramCntl_inst_sAddr_x = 0;
                                sdramCntl_inst_activeFlag_x[sdramCntl_inst_bank_s] = 1'b0;
                            end
                        end
                        else if ((sdramCntl_inst_rdInProgress_s == 1'b0)) begin
                            sdramCntl_inst_cmd_x = 5;
                            sdramCntl_inst_sDataDir_x = 1'b0;
                            sdramCntl_inst_sAddr_x = sdramCntl_inst_col_s;
                            sdramCntl_inst_rdPipeline_x = {1'b1, sdramCntl_inst_rdPipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if ((sdramCntl_inst_host_intf_wr_i == 1'b1)) begin
                    if ((sdramCntl_inst_ba_x == sdramCntl_inst_ba_r)) begin
                        if ((sdramCntl_inst_doActivate_s == 1'b1)) begin
                            if (((sdramCntl_inst_activateInProgress_s == 1'b0) && (sdramCntl_inst_writeInProgress_s == 1'b0) && (sdramCntl_inst_rdInProgress_s == 1'b0))) begin
                                sdramCntl_inst_cmd_x = 2;
                                sdramCntl_inst_timer_x = 2;
                                sdramCntl_inst_state_x = 3'b101;
                                sdramCntl_inst_sAddr_x = 0;
                                sdramCntl_inst_activeFlag_x[sdramCntl_inst_bank_s] = 1'b0;
                            end
                        end
                        else if ((sdramCntl_inst_rdInProgress_s == 1'b0)) begin
                            sdramCntl_inst_cmd_x = 4;
                            sdramCntl_inst_sDataDir_x = 1'b1;
                            sdramCntl_inst_sAddr_x = sdramCntl_inst_col_s;
                            sdramCntl_inst_wrPipeline_x = 5'h1;
                            sdramCntl_inst_wrTimer_x = 2;
                        end
                    end
                end
                else begin
                    sdramCntl_inst_cmd_x = 7;
                    sdramCntl_inst_state_x = 3'b100;
                end
            end
            3'b101: begin
                sdramCntl_inst_cmd_x = 3;
                sdramCntl_inst_timer_x = 2;
                sdramCntl_inst_state_x = 3'b100;
                sdramCntl_inst_rasTimer_x = 5;
                sdramCntl_inst_sAddr_x = sdramCntl_inst_row_s;
                sdramCntl_inst_activeBank_x = sdramCntl_inst_bank_s;
                sdramCntl_inst_activeRow_x[sdramCntl_inst_bank_s] = sdramCntl_inst_row_s;
                sdramCntl_inst_activeFlag_x[sdramCntl_inst_bank_s] = 1'b1;
            end
            3'b110: begin
                sdramCntl_inst_cmd_x = 1;
                sdramCntl_inst_timer_x = 7;
                sdramCntl_inst_state_x = 3'b100;
                sdramCntl_inst_rfshCntr_x = (sdramCntl_inst_rfshCntr_r - 1);
            end
            default: begin
                sdramCntl_inst_state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge clk, posedge memory_test_inst_host_intf_rst_i) begin: SDRAM_TEST_SDRAMCNTL_INST_SEQ_FUNC
    integer index;
    if (memory_test_inst_host_intf_rst_i == 1) begin
        sdramCntl_inst_cmd_r <= 7;
        sdramCntl_inst_rdPipeline_r <= 0;
        sdramCntl_inst_sdramData_r <= 0;
        sdramCntl_inst_ba_r <= 0;
        sdramCntl_inst_wrPipeline_r <= 0;
        sdramCntl_inst_sData_r <= 0;
        sdramCntl_inst_wrTimer_r <= 0;
        sdramCntl_inst_rfshCntr_r <= 0;
        sdramCntl_inst_sAddr_r <= 0;
        sdramCntl_inst_timer_r <= 0;
        sdramCntl_inst_activeRow_r[0] <= 0;
        sdramCntl_inst_activeRow_r[1] <= 0;
        sdramCntl_inst_activeRow_r[2] <= 0;
        sdramCntl_inst_activeRow_r[3] <= 0;
        sdramCntl_inst_activeBank_r <= 0;
        sdramCntl_inst_refTimer_r <= 782;
        sdramCntl_inst_state_r <= 3'b000;
        sdramCntl_inst_rasTimer_r <= 0;
        sdramCntl_inst_sDataDir_r <= 0;
        sdramCntl_inst_activeFlag_r[0] <= 0;
        sdramCntl_inst_activeFlag_r[1] <= 0;
        sdramCntl_inst_activeFlag_r[2] <= 0;
        sdramCntl_inst_activeFlag_r[3] <= 0;
    end
    else begin
        sdramCntl_inst_state_r <= sdramCntl_inst_state_x;
        sdramCntl_inst_cmd_r <= sdramCntl_inst_cmd_x;
        sdramCntl_inst_sAddr_r <= sdramCntl_inst_sAddr_x;
        sdramCntl_inst_sData_r <= sdramCntl_inst_sData_x;
        sdramCntl_inst_sDataDir_r <= sdramCntl_inst_sDataDir_x;
        sdramCntl_inst_activeBank_r <= sdramCntl_inst_activeBank_x;
        sdramCntl_inst_sdramData_r <= sdramCntl_inst_sdramData_x;
        sdramCntl_inst_wrPipeline_r <= sdramCntl_inst_wrPipeline_x;
        sdramCntl_inst_rdPipeline_r <= sdramCntl_inst_rdPipeline_x;
        sdramCntl_inst_ba_r <= sdramCntl_inst_ba_x;
        sdramCntl_inst_timer_r <= sdramCntl_inst_timer_x;
        sdramCntl_inst_rasTimer_r <= sdramCntl_inst_rasTimer_x;
        sdramCntl_inst_refTimer_r <= sdramCntl_inst_refTimer_x;
        sdramCntl_inst_wrTimer_r <= sdramCntl_inst_wrTimer_x;
        sdramCntl_inst_rfshCntr_r <= sdramCntl_inst_rfshCntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            sdramCntl_inst_activeRow_r[index] <= sdramCntl_inst_activeRow_x[index];
            sdramCntl_inst_activeFlag_r[index] <= sdramCntl_inst_activeFlag_x[index];
        end
    end
end


always @(sdramCntl_inst_cmd_r, sdramCntl_inst_sData_r, sdramCntl_inst_sAddr_r, sdramCntl_inst_bank_s, sdramCntl_inst_sDataDir_r) begin: SDRAM_TEST_SDRAMCNTL_INST_SDRAM_PIN_MAP
    sdramCntl_inst_sd_intf_cke = 1;
    sdramCntl_inst_sd_intf_cs = 0;
    sdramCntl_inst_sd_intf_ras = sdramCntl_inst_cmd_r[2];
    sdramCntl_inst_sd_intf_cas = sdramCntl_inst_cmd_r[1];
    sdramCntl_inst_sd_intf_we = sdramCntl_inst_cmd_r[0];
    sdramCntl_inst_sd_intf_bs = sdramCntl_inst_bank_s;
    sdramCntl_inst_sd_intf_addr = sdramCntl_inst_sAddr_r;
    if ((sdramCntl_inst_sDataDir_r == 1'b1)) begin
        sdramCntl_inst_sDriver = sdramCntl_inst_sData_r;
    end
    else begin
        sdramCntl_inst_sDriver = 'bz;
    end
    sdramCntl_inst_sd_intf_dqml = 0;
    sdramCntl_inst_sd_intf_dqmh = 0;
end



assign sdramCntl_inst_host_intf_done_o = (sdramCntl_inst_rdPipeline_r[0] || sdramCntl_inst_wrPipeline_r[0]);
assign sdramCntl_inst_host_intf_data_o = sdramCntl_inst_sdramData_r;
assign sdramCntl_inst_host_intf_rdPending_o = sdramCntl_inst_rdInProgress_s;
assign sdramCntl_inst_sData_x = sdramCntl_inst_host_intf_data_i;



assign sdramCntl_inst_bank_s = sdramCntl_inst_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign sdramCntl_inst_ba_x = sdramCntl_inst_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign sdramCntl_inst_row_s = sdramCntl_inst_host_intf_addr_i[(13 + 9)-1:9];
assign sdramCntl_inst_col_s = sdramCntl_inst_host_intf_addr_i[9-1:0];


always @(sdramCntl_inst_activeRow_r[0], sdramCntl_inst_activeRow_r[1], sdramCntl_inst_activeRow_r[2], sdramCntl_inst_activeRow_r[3], sdramCntl_inst_rdPipeline_r, sdramCntl_inst_bank_s, sdramCntl_inst_sdramData_r, sdramCntl_inst_activeBank_r, sdramCntl_inst_wrTimer_r, sdramCntl_inst_sd_intf_dq, sdramCntl_inst_row_s, sdramCntl_inst_rasTimer_r, sdramCntl_inst_activeFlag_r[0], sdramCntl_inst_activeFlag_r[1], sdramCntl_inst_activeFlag_r[2], sdramCntl_inst_activeFlag_r[3]) begin: SDRAM_TEST_SDRAMCNTL_INST_DO_ACTIVE
    if (((sdramCntl_inst_bank_s != sdramCntl_inst_activeBank_r) || (sdramCntl_inst_row_s != sdramCntl_inst_activeRow_r[sdramCntl_inst_bank_s]) || (sdramCntl_inst_activeFlag_r[sdramCntl_inst_bank_s] == 1'b0))) begin
        sdramCntl_inst_doActivate_s = 1'b1;
    end
    else begin
        sdramCntl_inst_doActivate_s = 1'b0;
    end
    if ((sdramCntl_inst_rdPipeline_r[1] == 1'b1)) begin
        sdramCntl_inst_sdramData_x = sdramCntl_inst_sd_intf_dq;
    end
    else begin
        sdramCntl_inst_sdramData_x = sdramCntl_inst_sdramData_r;
    end
    if ((sdramCntl_inst_rasTimer_r != 0)) begin
        sdramCntl_inst_activateInProgress_s = 1'b1;
    end
    else begin
        sdramCntl_inst_activateInProgress_s = 1'b0;
    end
    if ((sdramCntl_inst_wrTimer_r != 0)) begin
        sdramCntl_inst_writeInProgress_s = 1'b1;
    end
    else begin
        sdramCntl_inst_writeInProgress_s = 1'b0;
    end
    if ((sdramCntl_inst_rdPipeline_r[(3 + 2)-1:1] != 0)) begin
        sdramCntl_inst_rdInProgress_s = 1'b1;
    end
    else begin
        sdramCntl_inst_rdInProgress_s = 1'b0;
    end
end


always @(posedge sdram_clk_o) begin: SDRAM_TEST_UART_RX_INST_RECV
    case (state_rx)
        3'b000: begin
            // Drive Line High for RX_IDLE
            uart_rx_inst_r_RX_DV <= 0;
            uart_rx_inst_r_Bit_Index <= 0;
            uart_rx_inst_r_Clock_Count <= 0;
            if ((i_uart_rx == 0)) begin
                state_rx <= 3'b001;
            end
            else begin
                state_rx <= 3'b000;
                // End of RX RX_IDLE state_rx
                // Start of RX RX_START_BIT state_rx
            end
        end
        3'b001: begin
            if (($signed({1'b0, uart_rx_inst_r_Clock_Count}) == ((434 - 1) / 2))) begin
                if ((i_uart_rx == 0)) begin
                    uart_rx_inst_r_Clock_Count <= 0;
                    state_rx <= 3'b010;
                end
                else begin
                    state_rx <= 3'b000;
                end
            end
            else begin
                uart_rx_inst_r_Clock_Count <= (uart_rx_inst_r_Clock_Count + 1);
                state_rx <= 3'b001;
                // End of RX RX_START_BIT state_rx
                // Start of RX RX_DATA_BITS state_rx
            end
        end
        3'b010: begin
            if (($signed({1'b0, uart_rx_inst_r_Clock_Count}) < (434 - 1))) begin
                uart_rx_inst_r_Clock_Count <= (uart_rx_inst_r_Clock_Count + 1);
                state_rx <= 3'b010;
            end
            else begin
                uart_rx_inst_r_Clock_Count <= 0;
                uart_rx_inst_r_RX_Byte[uart_rx_inst_r_Bit_Index] <= i_uart_rx;
                if ((uart_rx_inst_r_Bit_Index < 7)) begin
                    uart_rx_inst_r_Bit_Index <= (uart_rx_inst_r_Bit_Index + 1);
                    state_rx <= 3'b010;
                end
                else begin
                    uart_rx_inst_r_Bit_Index <= 0;
                    state_rx <= 3'b011;
                end
                // End of RX RX_DATA_BITS state_rx
                // Start of RX RX_STOP_BIT state_rx
            end
        end
        3'b011: begin
            if (($signed({1'b0, uart_rx_inst_r_Clock_Count}) < (434 - 1))) begin
                uart_rx_inst_r_Clock_Count <= (uart_rx_inst_r_Clock_Count + 1);
                state_rx <= 3'b011;
            end
            else begin
                uart_rx_inst_r_RX_DV <= 1;
                uart_rx_inst_r_Clock_Count <= 0;
                state_rx <= 3'b100;
                // End of RX RX_STOP_BIT state_rx
                // Start of RX RX_CLEANUP state_rx
            end
        end
        3'b100: begin
            state_rx <= 3'b000;
            uart_rx_inst_r_RX_DV <= 0;
        end
        default: begin
            state_rx <= 3'b000;
        end
    endcase
    w_RX_DV <= uart_rx_inst_r_RX_DV;
    w_RX_Byte <= uart_rx_inst_r_RX_Byte;
end


always @(w_TX_Active, w_TX_Serial) begin: SDRAM_TEST_FORCEHI_INST_COMB
    if (w_TX_Active) begin
        o_uart_tx = w_TX_Serial;
    end
    else begin
        o_uart_tx = 1'b1;
    end
end



assign memory_test_inst_rand_val = memory_test_inst_rand_gen_shfreg;


always @(posedge clk) begin: SDRAM_TEST_MEMORY_TEST_INST_RAND_GEN_RAND_SHIFT
    integer i;
    integer xor_bit;
    integer bits;
    bits = (memory_test_inst_rand_gen_shfreg & 53256);
    xor_bit = 0;
    for (i=0; i<16; i=i+1) begin
        xor_bit = (xor_bit ^ bits[i]);
    end
    if (memory_test_inst_rand_load) begin
        memory_test_inst_rand_gen_shfreg <= 42;
    end
    else if (memory_test_inst_rand_enable) begin
        memory_test_inst_rand_gen_shfreg[16-1:1] <= memory_test_inst_rand_gen_shfreg[(16 - 1)-1:0];
        memory_test_inst_rand_gen_shfreg[0] <= xor_bit;
    end
end


always @(posedge clk) begin: SDRAM_TEST_MEMORY_TEST_INST_SDRAM_TESTER
    if ((reset == 1'b1)) begin
        memory_test_inst_error <= 1'b0;
        memory_test_inst_test_state <= 2'b01;
        test_status <= 49;
        led_status <= 4'h1;
        memory_test_inst_address <= 0;
        memory_test_inst_rand_load <= 1;
    end
    else if ((memory_test_inst_test_state == 2'b01)) begin
        memory_test_inst_rand_load <= 0;
        memory_test_inst_rand_enable <= 0;
        test_status <= 50;
        led_status <= 4'h2;
        if ((sdramCntl_inst_host_intf_done_o == 1'b0)) begin
            memory_test_inst_wr_enable <= 1'b1;
        end
        else begin
            memory_test_inst_wr_enable <= 1'b0;
            memory_test_inst_rand_enable <= 1;
            memory_test_inst_address <= (memory_test_inst_address + 1);
            if ((memory_test_inst_address == 16777215)) begin
                memory_test_inst_test_state <= 2'b10;
                memory_test_inst_address <= 0;
                memory_test_inst_rand_load <= 1;
                memory_test_inst_error <= 1'b0;
            end
        end
    end
    else if ((memory_test_inst_test_state == 2'b10)) begin
        memory_test_inst_rand_load <= 0;
        memory_test_inst_rand_enable <= 0;
        test_status <= 51;
        led_status <= 4'h4;
        if ((sdramCntl_inst_host_intf_done_o == 1'b0)) begin
            memory_test_inst_rd_enable <= 1'b1;
        end
        else begin
            memory_test_inst_rd_enable <= 1'b0;
            memory_test_inst_rand_enable <= 1;
            memory_test_inst_address <= (memory_test_inst_address + 1);
            if ((memory_test_inst_rand_val != sdramCntl_inst_host_intf_data_o)) begin
                memory_test_inst_error <= 1'b1;
            end
            if ((memory_test_inst_address == 16777215)) begin
                memory_test_inst_test_state <= 2'b11;
            end
        end
    end
    else begin
        memory_test_inst_rand_load <= 0;
        memory_test_inst_rand_enable <= 0;
        if ((memory_test_inst_error == 1'b1)) begin
            test_status <= 70;
            led_status <= 4'h8;
        end
        else begin
            test_status <= 79;
            led_status <= 4'hf;
        end
    end
end



assign memory_test_inst_host_intf_rst_i = reset;
assign sdramCntl_inst_host_intf_wr_i = (memory_test_inst_wr_enable && (!sdramCntl_inst_host_intf_done_o));
assign sdramCntl_inst_host_intf_rd_i = (memory_test_inst_rd_enable && (!sdramCntl_inst_host_intf_done_o));
assign sdramCntl_inst_host_intf_data_i = memory_test_inst_rand_val;
assign sdramCntl_inst_host_intf_addr_i = memory_test_inst_address;

endmodule
